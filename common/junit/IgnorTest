1. How to get code coverage?
http://www.petrikainulainen.net/programming/maven/creating-code-coverage-reports-for-unit-and-integration-tests-with-the-jacoco-maven-plugin/

http://www.mkyong.com/unittest/junit-4-tutorial-3-ignore-test/

JUnit 4 Tutorial 3 – Ignore Test
This “Ignored” means the method is not ready to test, the JUnit engine will just bypass this method.

import org.junit.*;
 
/**
 * JUnit Ignore Test
 * @author mkyong
 *
 */
public class JunitTest3 {
 
	@Ignore("Not Ready to Run")  
	@Test
	public void divisionWithException() {  
	  System.out.println("Method is not ready yet");
	}  
 
}
In above example, JUnit will not test the divisionWithException() method.

2. ==============
package com.example.foo;

import static org.junit.Assert.assertEquals;

import org.junit.Test;
import org.junit.Ignore;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

/**
 * Tests for {@link Foo}.
 *
 * @author user@example.com (John Doe)
 */
@RunWith(JUnit4.class)
public class FooTest {

    @Test
    public void thisAlwaysPasses() {

    }

    @Test
    @Ignore
    public void thisIsIgnored() {
    }
}

All test methods are annotated with @Test. Unlike JUnit3 tests, you do not need to prefix the method name with "test" (and usually don't)
Do not have your test classes extend junit.framework.TestCase (directly or indirectly). Usually, tests with JUnit4 do not need to extend anything (which is good, since Java does not support multiple inheritance)
Do not use any classes in junit.framework or junit.extensions


