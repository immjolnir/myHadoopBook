1. avro
 http://svn.apache.org/viewvc/avro/

2. hive 
 https://github.com/apache/hive.git

3. oozie dataAction
Oozie Main Features
* Execute and monitor workflows in hadoop
* Periodic scheduling of workflows
* Trigger execution by data availability
* HTTP and command line interface + Web console

feature:
* Directed Acyclic Graph of Jobs

Oozie Workflow Nodes:
* Control Flow
	* start/end/kill
	* decision
	* fork/join

* Actions:
	* map-redcue
	* pig
	* hdfs
	* sub-workflow
	* java -run custom java code(main method)
job.property
oozie.wf.application.path
Purpose:
* Coordinated exectution of workflows on the Grid
* Workflows are backwards compatible


https://cwiki.apache.org/confluence/display/OOZIE/Java+Cookbook
http://mail-archives.apache.org/mod_mbox/incubator-oozie-users/201204.mbox/%3CCAF2=Kq4asO35u0OZUPkP2t2F5WwsUnVrRFePdgJqOJOzo2n5ig@mail.gmail.com%3E
 http://www.infoq.com/articles/oozieexample
http://www.infoq.com/articles/quality-code-book-review
http://www.michael-noll.com/blog/2013/03/17/reading-and-writing-avro-files-from-the-command-line/
https://github.com/jwills/avro-json

http://ehukai.com/2011/06/14/using-oozie-to-process-daily-logs/

4. pig
http://www-01.ibm.com/software/data/infosphere/hadoop/pig/
About Pig and PigLatin

Pig was initially developed at Yahoo! to allow people using HadoopÂ® to focus more on analyzing large data sets and spend less time having to write mapper and reducer programs. Like actual pigs, who eat almost anything, the Pig programming language is designed to handle any kind of data.hence the name! 

Pig is made up of two components: the first is the language itself, which is called PigLatin (yes, people naming various Hadoop projects do tend to have a sense of humor associated with their naming conventions), and the second is a runtime environment where PigLatin programs are executed. Think of the relationship between a Java Virtual Machine (JVM) and a Java application. In this section, we.ll just refer to the whole entity as Pig. 

 At the present time, Pig's infrastructure layer consists of a compiler that produces sequences of Map-Reduce programs, for which large-scale parallel implementations already exist (e.g., the Hadoop subproject). Pig's language layer currently consists of a textual language called Pig Latin, which has the following key properties:

    Ease of programming. It is trivial to achieve parallel execution of simple, "embarrassingly parallel" data analysis tasks. Complex tasks comprised of multiple interrelated data transformations are explicitly encoded as data flow sequences, making them easy to write, understand, and maintain.
    Optimization opportunities. The way in which tasks are encoded permits the system to optimize their execution automatically, allowing the user to focus on semantics rather than efficiency.
    Extensibility. Users can create their own functions to do special-purpose processing.

