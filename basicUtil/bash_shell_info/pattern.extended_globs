http://mywiki.wooledge.org/BashGuide/Patterns

BASH offers three different kinds of pattern matching. Pattern matching serves two roles in the shell: selecting filenames within a directory, or determining whether a string conforms to a desired format. 

1. Glob Patterns

Globs are a very important concept in Bash, if only for their incredible convenience. Properly understanding globs will benefit you in many ways. Globs are basically patterns that can be used to match filenames or other strings.

Globs are composed of normal characters and metacharacters. Metacharacters are characters that have a special meaning. These are the metacharacters that can be used in globs:

    *: Matches any string, including the null string.

    ?: Matches any single character.

    [...]: Matches any one of the enclosed characters. 

Globs are implicitly anchored at both ends. What this means is that a glob must match a whole string (filename or data string). A glob of a* will not match the string cat, because it only matches the at, not the whole string. A glob of ca*, however, would match cat. 

2.  When a glob is used to match filenames, the * and ? characters cannot match a slash (/) character. So, for instance, the glob */bin might match foo/bin but it cannot match /usr/local/bin. When globs match patterns, the / restriction is removed. 

3. 
Here, * is expanded into the single filename "a b.txt". This filename will be passed as a single argument to rm. Using globs to enumerate files is always a better idea than using `ls` for that purpose. Here's an example with some more complex syntax which we will cover later on, but it will illustrate the reason very well:

		$ ls
		a b.txt
		$ for file in `ls`; do rm "$file"; done
		rm: cannot remove `a': No such file or directory
		rm: cannot remove `b.txt': No such file or directory
		$ for file in *; do rm "$file"; done
		$ ls

Here we use the for command to go through the output of the ls command. The ls command prints the string a b.txt. The for command splits that string into words over which it iterates. As a result, for iterates over first a, and then b.txt. Naturally, this is not what we want. The glob, however, expands in the proper form. It results in the string "a b.txt", which for takes as a single argument.

In addition to filename expansion, globs may also be used to check whether data matches a specific format. For example, we might be given a filename, and need to take different actions depending on its extension:

$ filename="somefile.jpg"
$ if [[ $filename = *.jpg ]]; then
> echo "$filename is a jpeg"
> fi
somefile.jpg is a jpeg

		Good Practice:
		You should always use globs instead of ls (or similar) to enumerate files. Globs will always expand safely and minimize the risk for bugs.
		You can sometimes end up with some very weird filenames. Most scripts aren't tested against all the odd cases that they may end up being used with. Don't let your script be one of those!

3.5 
	$ langRegex='(..)_(..)'
	$ if [[ $LANG =~ $langRegex ]]
	> then
	>     echo "Your country code (ISO 3166-1-alpha-2) is ${BASH_REMATCH[2]}."
	>     echo "Your language code (ISO 639-1) is ${BASH_REMATCH[1]}."
	> else
	>     echo "Your locale was not recognised"
	> fi

Be aware that regex parsing in Bash has changed between releases 3.1 and 3.2. Before 3.2 it was safe to wrap your regex pattern in quotes but this has changed in 3.2. Since then, regex should always be unquoted. You should protect any special characters by escaping it using a backslash. The best way to always be compatible is to put your regex in a variable and expand that variable in [[ without quotes, as we showed above.

    Good Practice:
    Since the way regex is used in 3.2 is also valid in 3.1 we highly recommend you just never quote your regex. Remember to keep special characters properly escaped!

    For cross-compatibility (to avoid having to escape parentheses, pipes and so on) use a variable to store your regex, e.g. re='^\*( >| *Applying |.*\.diff|.*\.patch)'; [[ $var =~ $re ]] This is much easier to maintain since you only write ERE syntax and avoid the need for shell-escaping, as well as being compatible with all 3.x BASH versions.

	kovacsbv@leviticus:~$ cat tmp.sh
	#! /bin/bash

	VARIABLE="Let's test this string!"

	# This is for regular expressions:
	if [[ "$VARIABLE" =~ "Let's.*ring" ]]
	then
	    echo "#1 matched"
	else
	    echo "#1 nope"
	fi

	if [[ "$VARIABLE" =~ Let\'s.*ring ]]
	then
	    echo "#2 matched"
	else
	    echo "#2 nope"
	fi
	kovacsbv@leviticus:~$ ./tmp.sh
	#1 nope
	#2 matched

Actually 'case' is much much faster than even simple matching using 'if', and can even do pattern and glob matching:

	#!/bin/sh

	thisString="1 2 3 4 5"
	searchString="1 2"
	# if you single quote your input, you could do this
	# searchString=$1

	case $thisString in
	  # match exact string
	  "$searchString") echo yep, it matches exactly;;
	  
	  # match start of string
	  "$searchString"*) echo yep, it matches at the start ;;

	  # match end of string
	  *"$searchString") echo yep, it matches at the end ;;

	  # searchString can be anywhere in thisString
	  *"$searchString"*) echo yep, it matches in the middle somewhere ;;
	  
	  *) echo nope ;;
	esac


	>if [[  2 == 1 ]]; then echo "1";  else echo "0"; fi
	0
	>if [[  1 == 1 ]]; then echo "1";  else echo "0"; fi
	1


4. Extended Globs

	Bash also supports a feature called Extended Globs. These globs are more powerful in nature; technically, they are equivalent to regular expressions, although the syntax looks different than most people are used to. This feature is turned off by default, but can be turned on with the shopt command, which is used to toggle shell options:

		$ shopt -s extglob

		    ?(list): Matches zero or one occurrence of the given patterns.

		    *(list): Matches zero or more occurrences of the given patterns.

		    +(list): Matches one or more occurrences of the given patterns.

		    @(list): Matches one of the given patterns.

		    !(list): Matches anything except one of the given patterns. 

	The list inside the parentheses is a list of globs or extended globs separated by the | character. Here's an example:

		$ ls
		names.txt  tokyo.jpg  california.bmp
		$ echo !(*jpg|*bmp)
		names.txt

	Our extended glob expands to anything that does not match the *jpg or the *bmp pattern. Only the text file passes for that, so it is expanded. 

5. 
Brace Expansion
Then, there is Brace Expansion. Brace Expansion technically does not fit in the category of patterns, but it is similar. Globs only expand to actual filenames, but brace expansions will expand to any possible permutation of their contents. Here's how they work:

	$ echo th{e,a}n
	then than
	$ echo {/home/*,/root}/.*profile
	/home/axxo/.bash_profile /home/lhunath/.profile /root/.bash_profile /root/.profile
	$ echo {1..9}
	1 2 3 4 5 6 7 8 9
	$ echo {0,1}{0..9}
	00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19

The brace expansion is replaced by a list of words, just like a glob is. However, these words aren't necessarily filenames, and they are not sorted (than would have come before then if they were).

Brace expansion happens before filename expansion. In the second echo command above, we used a combination of brace expansion and globs. The brace expansion goes first, and we get:

$ echo /home/*/.*profile /root/.*profile

After the brace expansion, the globs are expanded, and we get the filenames as the final result.

Brace expansions can only be used to generate lists of words. They cannot be used for pattern matching. 

>for i in {1..9};  do echo $i; done
1
2
3
4
5
6
7
8
9

>for i in `seq 1 9`;  do echo $i; done
1
2
3
4
5
6
7
8
9

>for i in {0,1}{0..9}; do echo $i; done
00
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
18
19

for(( i=0;i<24;i++)); do if [ $i -lt 10 ];then 

or
>for i in $(seq 1 9); do echo part-201312230$i; done
part-2013122301
part-2013122302
part-2013122303
part-2013122304
part-2013122305
part-2013122306
part-2013122307
part-2013122308
part-2013122309
>for i in $(seq 10 23); do echo part-20131223$i; done
part-2013122310
part-2013122311
part-2013122312
part-2013122313
part-2013122314
part-2013122315
part-2013122316
part-2013122317
part-2013122318
part-2013122319
part-2013122320
part-2013122321
part-2013122322
part-2013122323
>for i in {0,1}{0..9} 2{0..3}; do echo part-20131223$i; done
part-2013122300
part-2013122301
part-2013122302
part-2013122303
part-2013122304
part-2013122305
part-2013122306
part-2013122307
part-2013122308
part-2013122309
part-2013122310
part-2013122311
part-2013122312
part-2013122313
part-2013122314
part-2013122315
part-2013122316
part-2013122317
part-2013122318
part-2013122319
part-2013122320
part-2013122321
part-2013122322
part-2013122323
e.g
for i in {17..24}{0,1}{0..9} {17..24}2{0..3}; do echo part-20131223$i; done

