0> var=
0> echo ${var=aa}被声明了，就不赋值了


0> echo ${var:=aa} 虽然被声明了，但仍然是null值，依然赋值
aa

$ man bash
Compound Commands
 (list) list is executed in a subshell environment
 { list; } list is simply executed in the current shell environment.

    ${parameter:-word}
              Use Default Values.  If parameter is unset or null, the expansion of word is substituted.  Otherwise, the value of parameter is sub‐
              stituted.
    ${parameter:=word}
              Assign Default Values.  If parameter is unset or null, the expansion of word is assigned to parameter.  The value  of  parameter  is
              then substituted.  Positional parameters and special parameters may not be assigned to in this way.
		e.g
		0> echo $var

		0> echo ${var:-word} # not assigned
		word
		0> echo $var

		0> echo ${var:=word}
		word
		0> echo $var # assigned
		word

		so the difference between the above command, it the assignment.

    ${parameter:?word}
              Display  Error  if  Null or Unset.  If parameter is null or unset, the expansion of word (or a message to that effect if word is not
              present) is written to the standard error and the shell, if it is not interactive, exits.  Otherwise, the value of parameter is sub‐
              stituted.
		e.g
		0> unset var
		1> echo ${var:?not exist}
		bash: var: not exist

    ${parameter:+word}
              Use Alternate Value.  If parameter is null or unset, nothing is substituted, otherwise the expansion of word is substituted.
      
      ${parameter:offset}
      ${parameter:offset:length}
              Substring  Expansion.   Expands to up to length characters of parameter starting at the character specified by offset.  If length is
              omitted, expands to the substring of parameter starting at the character specified by offset.   length  and  offset  are  arithmetic
              expressions  (see ARITHMETIC EVALUATION below).  If offset evaluates to a number less than zero, the value is used as an offset from
              the end of the value of parameter.  If length evaluates to a number less than zero, and parameter is not @ and  not  an  indexed  or
              associative array, it is interpreted as an offset from the end of the value of parameter rather than a number of characters, and the
              expansion is the characters between the two offsets.  If parameter is @, the result is length  positional  parameters  beginning  at
              offset.   If  parameter is an indexed array name subscripted by @ or *, the result is the length members of the array beginning with
              ${parameter[offset]}.  A negative offset is taken relative to one greater than the maximum index of the specified array.   Substring
              expansion  applied to an associative array produces undefined results.  Note that a negative offset must be separated from the colon
              by at least one space to avoid being confused with the :- expansion.  Substring indexing is zero-based unless the positional parame‐
              ters  are  used,  in  which case the indexing starts at 1 by default.  If offset is 0, and the positional parameters are used, $0 is
              prefixed to the list.

	e.g 
		$ a=abcdf
		$ echo $a
		abcdf
		$ echo ${a:0}
		abcdf
		$ echo ${a:0:1}
		a
	$ cat parameterExpansionTest.sh
			infile=a.out
			extLength=3
			fileext=out

			# test end of string for no file extension
			 if [ ! "${infile:(-$extLength)}" = $fileext ] ; then
				echo "no extend"
			else
				echo "extend found"
				echo ${infile:(-$extLength)}
			 fi
	$ sh parameterExpansionTest.sh
	extend found
	out


====================
       ${!prefix*}
       ${!prefix@}
              Names matching prefix.  Expands to the names of variables whose names begin with prefix, separated by the first character of the IFS
              special variable.  When @ is used and the expansion appears within double quotes, each variable name expands to a separate word.

       ${!name[@]}
       ${!name[*]}
              List  of array keys.  If name is an array variable, expands to the list of array indices (keys) assigned in name.  If name is not an
              array, expands to 0 if name is set and null otherwise.  When @ is used and the expansion appears  within  double  quotes,  each  key
              expands to a separate word.
       ${parameter/pattern/string}
              Pattern  substitution.   The  pattern is expanded to produce a pattern just as in pathname expansion.  Parameter is expanded and the
              longest match of pattern against its value is replaced with string.  If pattern begins with /, all matches of pattern  are  replaced
              with  string.   Normally only the first match is replaced.  If pattern begins with #, it must match at the beginning of the expanded
              value of parameter.  If pattern begins with %, it must match at the end of the expanded value of  parameter.   If  string  is  null,
              matches  of  pattern  are deleted and the / following pattern may be omitted.  If parameter is @ or *, the substitution operation is
              applied to each positional parameter in turn, and the expansion is the resultant list.  If  parameter  is  an  array  variable  sub‐
              scripted  with @ or *, the substitution operation is applied to each member of the array in turn, and the expansion is the resultant
              list.

       ${parameter^pattern}
       ${parameter^^pattern}
       ${parameter,pattern}
       ${parameter,,pattern}
              Case modification.  This expansion modifies the case of alphabetic characters in parameter.  The pattern is expanded  to  produce  a
              pattern just as in pathname expansion.  The ^ operator converts lowercase letters matching pattern to uppercase; the , operator con‐
              verts matching uppercase letters to lowercase.  The ^^ and ,, expansions convert each matched character in the expanded value; the ^
              and  ,  expansions match and convert only the first character in the expanded value.  If pattern is omitted, it is treated like a ?,
              which matches every character.  If parameter is @ or *, the case modification operation is applied to each positional  parameter  in
              turn,  and  the  expansion  is the resultant list.  If parameter is an array variable subscripted with @ or *, the case

2.
       [[ expression ]]
              Return  a status of 0 or 1 depending on the evaluation of the conditional expression expression.  Expressions are composed of the primaries described below under CONDITIONAL EXPRESSIONS.  Word split-
              ting and pathname expansion are not performed on the words between the [[ and ]]; tilde expansion, parameter and variable expansion, arithmetic expansion, command substitution, process  substitution,
              and quote removal are performed.  Conditional operators such as -f must be unquoted to be recognized as primaries.

              When used with [[, The < and > operators sort lexicographically using the current locale.

              When  the == and != operators are used, the string to the right of the operator is considered a pattern and matched according to the rules described below under Pattern Matching.  If the shell option
              nocasematch is enabled, the match is performed without regard to the case of alphabetic characters.  The return value is 0 if the string matches (==) or does not match (!=) the pattern, and 1  other-
              wise.  Any part of the pattern may be quoted to force it to be matched as a string.

              An  additional  binary  operator,  =~,  is available, with the same precedence as == and !=.  When it is used, the string to the right of the operator is considered an extended regular expression and
              matched accordingly (as in regex(3)).  The return value is 0 if the string matches the pattern, and 1 otherwise.  If the regular expression is syntactically incorrect,  the  conditional  expression’s
              return  value  is  2.  If the shell option nocasematch is enabled, the match is performed without regard to the case of alphabetic characters.  Any part of the pattern may be quoted to force it to be
              matched as a string.  Substrings matched by parenthesized subexpressions within the regular expression are saved in the array variable BASH_REMATCH.  The element of BASH_REMATCH with index 0  is  the
              portion of the string matching the entire regular expression.  The element of BASH_REMATCH with index n is the portion of the string matching the nth parenthesized subexpression.


3.
  Here Documents
       This type of redirection instructs the shell to read input from the current source until a line containing only delimiter (with no trailing blanks) is seen.  All of the lines read up to that point are  then
       used as the standard input for a command.

       The format of here-documents is:

              <<[-]word
                      here-document
              delimiter

       No  parameter  expansion, command substitution, arithmetic expansion, or pathname expansion is performed on word.  If any characters in word are quoted, the delimiter is the result of quote removal on word,
       and the lines in the here-document are not expanded.  If word is unquoted, all lines of the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion.  In the latter
       case, the character sequence \<newline> is ignored, and \ must be used to quote the characters \, $, and `.

       If the redirection operator is <<-, then all leading tab characters are stripped from input lines and the line containing delimiter.  This allows here-documents within shell scripts to be indented in a nat-
       ural fashion.

   Here Strings
       A variant of here documents, the format is:

              <<<word

       The word is expanded and supplied to the command on its standard input.


 Duplicating File Descriptors
       The redirection operator

              [n]<&word

       is used to duplicate input file descriptors.  If word expands to one or more digits, the file descriptor denoted by n is made to be a copy of that file descriptor.  If the digits in word do  not  specify  a
       file descriptor open for input, a redirection error occurs.  If word evaluates to -, file descriptor n is closed.  If n is not specified, the standard input (file descriptor 0) is used.

       The operator

              [n]>&word

       is  used  similarly  to duplicate output file descriptors.  If n is not specified, the standard output (file descriptor 1) is used.  If the digits in word do not specify a file descriptor open for output, a
       redirection error occurs.  As a special case, if n is omitted, and word does not expand to one or more digits, the standard output and standard error are redirected as described previously.

   Moving File Descriptors
       The redirection operator

              [n]<&digit-

       moves the file descriptor digit to file descriptor n, or the standard input (file descriptor 0) if n is not specified.  digit is closed after being duplicated to n.

       Similarly, the redirection operator

              [n]>&digit-

       moves the file descriptor digit to file descriptor n, or the standard output (file descriptor 1) if n is not specified.

    Opening File Descriptors for Reading and Writing
       The redirection operator

              [n]<>word

       causes the file whose name is the expansion of word to be opened for both reading and writing on file descriptor n, or on file descriptor 0 if n is not specified.  If the file does not exist, it is created.


